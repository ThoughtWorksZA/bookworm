@Scripts.Render("~/Scripts/puku/clickableDiv.js")

@using BookWorm.Helpers
@using PagedList.Mvc
@model BookWorm.ViewModels.FilterInformation

<div class="row-fluid">
    <div class="row-content">
        <div class="span12">
            <p class="lead">@ViewBag.Title</p>
            
        </div>
    </div>
</div>
<div class="row gray-body-row">
    <div class="row-content">
        <div class="span12">
            <div class="row-fluid">
                @if (!Convert.ToBoolean(ViewBag.HideFilter))
                {
                    <div class="span3">
                        <div class="filters">
                            <div class="popover-title"><i class="icon-tags"></i> Narrow your search</div>
                            <div class="popover-content">
                                @Html.Partial("Filter")
                            </div>
                        </div>
                    </div>
                }
                <div class="span9">
                    @if (TempData["flashNotice"] != null && !TempData["flashNotice"].ToString().IsEmpty())
                    {
                        <div><i class="icon-inbox"></i>@TempData["flashNotice"]</div>
                        <div class="some-space">
                            <center><quote class="lead">“A room without books is like a body without a soul.” 
                                        <span style="font-size: small">― Marcus Tullius Cicero</span></quote></center>
                        </div>
                    }
                    <p>
                        @if (Html.ViewContext.HttpContext.User.Identity.IsAuthenticated)
                        {
                            @Html.ActionLink("Create New", "Create", null, new {id = "createNewBookLink"})
                        }
                    </p>
                    @if (Model.BookInformations != null && Model.BookInformations.Any()){
                        <ol>
                            @foreach (var item in Model.BookInformations)
                            {
                                string defaultBookCoverDisplay = "block";
                                <li><a class="book-detail-link" href="/Books/@item.Model.Id/@UrlFilter.FilterInvalidCharacters(item.Model.Title)">
                                        <div class="book-cover">
                                            @if (@Html.DisplayFor(model => item.Model.CoverImageUrl) != null && !@Html.DisplayFor(model => item.Model.CoverImageUrl).ToString().IsEmpty())
                                            {
                                                defaultBookCoverDisplay = "none";
                                                <div class="book-image book-image-wrapper"><img alt="@item.Model.Title" class="book-image" src="@item.Model.CoverImageUrl" onerror="$('#default-image-@item.Model.Id').show();$(this).parent().remove();"/></div>
                                            }

                                            <div id="default-image-@item.Model.Id" class="book-image default-cover-image" style="display: @defaultBookCoverDisplay">
                                                <div class="default-cover-info">
                                                    <h4>@item.Model.Title</h4>
                                                    @Html.DisplayFor(model => item.Model.Author)
                                                </div>
                                            </div>
                                            <div class="book-cover-hover-info">
                                                <div class="book-cover-info-wrapper">
                                                    <strong>@item.Model.Title</strong><br />
                                                    @Html.DisplayFor(model => item.Model.Author)
                                                </div>
                                            </div>
                                            <div class="row-fluid book-cover-info">
                                                <div class="span4 label-age-range">
                                                    @Html.DisplayFor(model => item.Model.AgeRange) years
                                            
                                                </div>
                                                <div class="span4 label-language">
                                                    @Html.DisplayFor(model => item.Model.Language)
                                                </div>
                                                <div class="span4 label-genre">
                                                    @Html.DisplayFor(model => item.Model.Genre)
                                                </div>

                                            </div>
                                        </div>
                                    </a>
                                </li>
                            }
                        </ol>
                    }
                </div>
            </div>
             @if (Model.BookInformations != null && Model.BookInformations.Any())
             {
                 <div class="row-fluid">
                     <div class="span12">
                         <center>@Html.PagedListPager(Model.BookInformations, page => Model.PaginationUrl(ViewContext.RouteData.Values["Action"].ToString(), page), PagedListRenderOptions.ClassicPlusFirstAndLast)</center>
                     </div>
                 </div>
             }
        </div>
    </div>
</div>
